% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EcoNumData.R
\name{EcoNumData}
\alias{EcoNumData}
\alias{new_econum_data}
\alias{print.EcoNumData}
\alias{summary.EcoNumData}
\alias{print.summary.EcoNumData}
\alias{validate}
\alias{validate.EcoNumData}
\alias{repos_save}
\alias{repos_save.EcoNumData}
\alias{repos_load}
\title{Create, manipulate, save and load EcoNumData objects}
\usage{
new_econum_data(
  x,
  metadata = list(project = "", sample = "", sample_date =
    get_opt_econum("def_sample_date"), author = "", date = Sys.time(), comment = NULL,
    topic = NULL),
  class = NULL
)

\method{print}{EcoNumData}(x, ...)

\method{summary}{EcoNumData}(object, ...)

\method{print}{summary.EcoNumData}(x, ...)

validate(object, ...)

\method{validate}{EcoNumData}(object, file = NULL, ...)

repos_save(object, envir = .GlobalEnv, local = TRUE, remote = TRUE, ...)

\method{repos_save}{EcoNumData}(object, envir = .GlobalEnv, local = TRUE, remote = TRUE, ...)

repos_load(file, backup_existing = FALSE, ...)
}
\arguments{
\item{x}{Some data.}

\item{metadata}{A list of various metadata, with, as a minimum: 'project',
'sample', 'sample_date' and 'author'.}

\item{class}{The (optional) class of the EcoNumData object to create (it will
subclass both \code{EcoNumData} and \code{data.frame}).}

\item{...}{Further arguments to pass to the function.}

\item{object}{Any object, but for \code{EcoNumData} methods, it must be an
\code{EcoNumData} object.}

\item{file}{The file path to where the object is stored in either the local
or the remote repository.}

\item{envir}{An environment where to assign the \code{EcoNumData} object
(\code{.GlobalEnv} by default).}

\item{local}{Logical (\code{TRUE} by default). Should we save the object in the
local repository, defined by \code{get_opt_econum("local_repos")}.}

\item{remote}{Logical (\code{TRUE} by default). Should we save the object in the
remote repository, defined by \code{get_opt_econum("remote_repos")}.}

\item{backup_existing}{Logical (\code{FALSE} by default). Should we backup an
object of the same name as the one that is loaded (it will become  \verb{<obj>2})?}
}
\value{
For \code{new_econum_data()}, the object that is just created. It is a
\code{data.frame} with a 'metadata' attribute, as a minimum, and it inherits from
both \code{EcoNumData} and \code{data.frame}.

For \code{validate()}, the object is returned possibly corrected by using a series
of validation rules (and warnings are usually issued if something is
changed).

For \code{repos_save()}, a vector of three named character strings, with 'object'
being the name of the object containing the item in the global workspace,
'local_file' being the path to the \code{.RData} file in the local repository (or
\code{NA} if it was not saved there) and 'remote_file' being the path to the
\code{.Rdata} file as saved in the remote repository (or \code{NA} if it was not saved
there). This is returned invisibly.

For \code{repos_load()}, the name of the object that is reloaded is returned
invisibly.
}
\description{
\code{EcoNumData} objects are data frames with metadata that are saved in a
specific way in both local and remote EcoNumData repositories. They are basic
building blocks for a simplified, file-based LIMS (Laboratory Information
Management System) as it is using at UMONS EcoNum.
}
\examples{
\dontrun{
# Save some generic EcoNumData
res <- repos_save(new_ecomum_data(data.frame(x = 1, y = 2)), remote = FALSE)
# The data is in .GlobalEnv
EcoNumData
summary(EcoNumData)

# Can be erased and reloaded from the repository later on
rm(EcoNumData)
get(repos_load(res["local_file"]))

# Delete the object from memory
rm(EcoNumData)
# ... and from the disk
unlink(res["local_file"])
# If the project subdirectory is empty, remove it
local_dir <- dirname(res["local_file"])
if (length(dir(local_dir)) == 0) unlink(local_dir, recursive = TRUE)
rm(local_dir)
}
}
\seealso{
\code{\link[=options_econum]{options_econum()}}, \code{\link[=time_to_fingerprint]{time_to_fingerprint()}}
}
\author{
Philippe Grosjean \email{Philippe.Grosjean@umons.ac.be}
}
\concept{GUI API implementation}
\keyword{misc}
